<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAkGBw0NDQ0NDw4OEA8NDxANDQ0PDw8PDxAPFhUWFhUVFhUY
        HSggGBolGxUXITEiJSsrLi4uFx8zODMtNystLiv/2wBDAQoKCg4NDhsQEBstJiAlLy0tKy8tLS0tLy0v
        LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3/wAARCADhAOADAREAAhEBAxEB/8QA
        HAABAAICAwEAAAAAAAAAAAAAAAYHAQUDBAgC/8QASRAAAgIBAgQCBgUIBggHAQAAAQIAAwQFEQYSITEH
        EyJBUWFxgRQykZPSFyNCVWJyocEzUqKxstEVFjRDVoKSlFNjc3SzwuE2/8QAGQEBAAMBAQAAAAAAAAAA
        AAAAAAEDBAIF/8QAKREBAAICAgEEAgEEAwAAAAAAAAECAxESMSEEFEFREyJhIzJSgTNC8P/aAAwDAQAC
        EQMRAD8AvGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
        ICAgICAgICAgICAgICBwZebTQvNbbXWo/SsdUH8TJiJnpEzEdo5m+ImiUdGza2PsqWy3+KgiWRhvPwrn
        PSPlrX8W9GHZsg+8UH+ZnXt7ufc0fVXixord7L097UOf8O8e3ue5xtzgcb6PkbCvOo3PZbG8pvsfacTi
        vHw7jLSflvq7FcBlZWB7FSCD8xK1j7gICAgICAgICAgICAgICAgICAgIGl4l4owtLr58m0BiCUpX0rX/
        AHV/mek7pjtfpxfJWnaptc8UdUzmevAqNFYBYmtTbkco7kt2UfAfOaq4K1/uY7+ovb+1X2ZmXZDc91tl
        rH9Kx2c/aZoiIjpmm0z24JKCAgIGw0rXM3CYNjZN1W36KueQ/Fex+yc2pW3cOq3tXqVlcNeL9isKdSp3
        HQfSKVKsvvesnr8R9kzX9N81a6ep+LrX03UaMupb8e1La37Oh3HwPsPumWYmJ1LXW0WjcO1ISQEBAQEB
        AQEBAQEBAQEBAQIR4i8eV6SnkU8tmZYu6oeq1Kezv/IeuXYsXPzPSjNm4RqO0M4d8P8AJ1Atqes3vXWw
        81lsbltdPaxP9Eu3q9nsl180V/WiimGbftdwcQeIGPiI2DolFdFQ9F8vkBd/UeUMOv7zbmTXDM+bovni
        v644VszEkk9ydz8ZpZWICAgIHJj3NW6WLtzVsrrzKGXcHcbg9CPdImN+CJ1O1vaHqWk8ToMbOorpz1X0
        La/QazYfWRvX+4d5ktW+LzXpupamaNW7aPO0vVuFMj6TQ5uw3YB22PluPUtq9eRuvRh/+TuLUzRqe1c1
        vhncdLc4V4jx9VxlyaDt+jbUT6dT+tT/AJ+uZb0mk6lsx5IvG4bmcOyAgICAgICAgICAgICAgafi3XU0
        zBvy36lBy1J/Xtboi/b/AABndKcracZL8K7V74ZcKtm2vrmofnHtdrMdH6gnf+lIPqHZR7vhL82TjHCr
        Ngx8p52aDxS45bPtfCxnIxKm5XYH/aHHr96A9vb39ksw4uMbntXnzcp4x0r2aGYgICAgICB90XPW62Ix
        V0YMjqdirDsQZE+SJ1L0JwBxPVrmC9WQqNfWoqy6mAK2Kegfb2Hb5HeYMtJx23D0sWSMldShOZi28J6x
        XfWWbT8w8jA7navf0lP7S9wfWPnLomM1NfMKJicN9x1K56rFdVdSCrqGVh2KkbgzG3PuAgICAgICAgIC
        AgICAgVZ4sM+bqOk6Qp9G1xbaB+03Lv8lDn5zVg/Ws2ZM/7WijZeKmuLpemV4WP6FmQv0eoL0NdCgBiP
        lsPnOMNOdty7z34U1ChZvecQED6rQsyqoJZiFVR3LE7AQRG1gcb+HT4GDi5lILclKLnqOvLZ67B7tzsf
        gD7Znx5uVpif9NOXBxrEx/tXs0MxAQEDfcEa+2mahRk7ny+by8hR2apujfZ3+UryU5V0sxX4W2vfxB0h
        NQ0nJQAMyVnJx2/bQFhsfeNx85hxW43h6GWvKkul4R6mcrR6Ax3bGZ8Y/Bdin9lgPlOs9dXR6e26JnKV
        xAQEBAQEBAQEBAQEBAqDWNWrHGeOeV38rysTYbAix0IBG/qHmA/bNdaz+FjtaPzol4rav9M1fIAO6Yu2
        Kns9Ann/ALRP2S3BXjRR6i/K6IS5SQECyvB3hI5OQNSuX8xjN+YBH9JeOxHtC/37eyZvUZNRxhq9Ni3P
        KV3ugYFWAKsCCpG4IPcETE3qK8SfDx8BnzMNC2ITvZWNy2P/AJp7/VN2HNy8T2wZ8HH9o6V3NDKQEBA9
        A8GcQBuG/pVgaz6HRbXao25mFQPt/Z2mDJT+pr7eljv/AEtz8NR4E5Ktj6hWNwVyFtA9iuuw6/8AKZ16
        mPMOPSzGpWjMzUQEBAQEBAQEBAQEBA+bHCqWYgKoLMT2AHUmB5rz+KBZrh1Za/RGSlyV9iyIAo39hIXf
        5z0Yx/pxeXbJ/U5I/mXm222097bHsPxYk/zlkRqNK5nc7cUlBAmPh/wJdq1gts5q8NG/OW9jYR3Sv+Z9
        Upy5Yp4+V+HDN53PT0Hg4dWPUlFKKldShERRsABMEzMzuXoxERGoc8hLDKGBBAII2II3BHsIgVRx14VB
        y+VpoCsd2swzsFY996yfq/unp8Jqxeo+LMeX02/NVQZOPZTY1ViMliHldHBVlPvE1xO/MMcxMduOSggT
        zhLiWjE0HV8R3HnXkrRUd92FiCtiPh3lF6TOSJaMd4jHaJbvwG1CpbM3FPS20V2p1+sqcwIHw5t/nK/U
        xPiVnpLR5hckyNpAQEBAQEBAQEBAQECM+JORZVo2e1e/MauQkdwrMFY/YTLMMbvCrNMxSdPNU9J5ZAQJ
        TwdwPn6p+eqStaEbY238wrdh3UAdW9/q98qyZa18SuxYbX8wtqjR+JK0WuvP05EQBURcQhVUdgBMnLHP
        xLbFckfMPjJyOJcBTfZ9Ez6UHNbVSjVXhB3Ke0geqTEY7eOkTOWvntLND1anPxqsqg712jcA/WVh0ZSP
        UQdxKrVms6lbW0WjcOlxXxGmm0o3ltdfe4pxcZPr22nsPcPaZNKcpRkvxhpKqOKbx5hv0/F5uoo8prSo
        9hb2zveKPuXGss/UNTxDwNrGpKBk5WnOy/UsGMyWr7g467e6d0y0r1EuL4b37mFXcR8J5umWirIRQGVn
        rtVt6rAvcKx/S93eaaZK2jwx3xWpPlopYrIG24T1FsPUcPIXfdLkBA7lWPKw9/QmcZI3WYd4rcbRL1LP
        MesQEBAQEBAQEDEDMBAQOnq+CuVi5GM2219T1Hf9oEbyazqdotG408osjKSrDZlJVge4I6ET1Xjz2xA7
        2i6ZZm5NeLX9e3n5d/aqM239mc2txjbqleU6eg/DLKps0fDWrYGlPJuTsyXL9YMPbv1+cwZomLy9LDMc
        I0lUqWuO+1K0Z3YKiKWdmOwCgbkmIJnSt+AcDUbsfKvxMxMbFvzsm3HrfFF26FtuYEsNgdttvdNOWaxM
        RMedMuKt5iZifG3JqlWTh63o9+o5KX0t59FVooFCVXsvo7+kep6dfdIjU0mKwmYmt4m0rImdpIFbeOF1
        TYOPjbBsh7/NqQdXWtEfnb4bdJo9NE8ts3qpjjpRs3PPIEl8N9N+l6xhVkbqj+e/7tYLD+IEqzW1SVuC
        u7w9LTznqEBAQEBAQEBAQEDEDMBA8z+Imn/RdYzqwNlazzk/dsAf+8n7J6WKd0h5eauryjksVNjw5qBx
        M7EyQf6G+t2/c32Yf9JM5vG6zDvHbjaJX1qfBKPe+bgZl2Bfd6VrU7PVaT15mrPTeYIy+NWjb0Jxed1n
        Tr/6q67/AMQW/wDaUyfyU/xOGT/Jg8CZWTsuo6tlZdAO5xlVcdH9zFepEfliP7Y0j8Uz/dKaYuPXTWlV
        aqldahERRsFUdABKpnfmV0RERqHV1rSMbPx3xsmsPU/cbkEMOzKR1BHtk1tNZ3CLVi0alFV4L1OkCvF1
        3JrpXoldtNdzKPUOY95Z+Ss91VfjtHVmf9Vdc/4gt/7SmPyU/wAU8L/5NdxHwzRpml6lm2XW5WbdjtQc
        u9t2AcheVF7KOvxnVLza0RHTi+OK0mZ7UbNzzyBavgPp3Ndm5ZHStEoQ/tMeZv4AfbMvqbeIhs9JXzMr
        mmNtICAgICAgICBiBmAgICBSvjvp/JlYmUB0uqapj+0h3H8G/hNnpp8TDD6uvmJVdNTIQPTnAeo/S9Kw
        bid28la3/fT0T/dPNyxq8w9XFbdIlv5WsICAgICBVnjrrATGxsBW9O5/PsH/AJabhd/ix/szT6avnbJ6
        q2o4qXm1hIHobwg036Po1LEbNku+Q3wJ5V/sqPtnn57bu9L09dUTWUryAgICAgICAgYgZgICAgaDjThm
        rVsNsdzyup8zHt7+XYB0PvB7ETvHeaTtXkxxeunnHWtJyMDIfGyKyliHsezL6mU+tT7Z6NbRaNw8y1Zr
        OpbXRuBtVzqq78fHDU278lptqVehKncE7jqD6pzbLWs6mXVcN7RuITXw412/RcltI1JGoS1y1Fj/AFVs
        OwIDdije31H4yjLSLxyq0YbzjnhZcQmRtZgICAgdLWNUowsezJvcJXUu5J7k+pQPWSegEmtZtOoc2tFY
        3LzhruZma1l5ecKbHVFLsFBZaKF+qCfcP5z0axFIiHm3m2SZs0EsVJXwFwVfq94JDJiVsPPv277d0T2s
        fb6pVlyxSP5XYcM3n+HorDxq6Kq6a1C11ItdajsFUbATz5nc7l6URERqHNISQEBAQEBAQEBAQMQMwEBA
        0HFfCeJq6Upkc48ly6tWVVyCCCu5B6f5TumSadK8mOL9u/oWj4+n41eLjqVqr5iAzFmJJJJJPvMi1ptO
        5dUrFY1Dk1TSsbMrNWTTXch/RsUNsfaD6j7xIi0x5hM1i3br6XpBwwK6b7WpHRabj5vlj2I59ID3EmTa
        2+3Na8epbScuyAgIET1fgldSuW3Pyrrq6zvXiV7U46/EDdmPv3ltcvGP1hTbFzn9pQ7xM4hwsDEbRdOW
        tDZ0yfKAC1p61JHdz69/V37y7DS1p52U58la14Vabw08Pq9TpuycvzUpP5vGNbBWZgTzN1B3A7fHed5s
        3GdQrwYOcbldelYFeJj041Q2rpRa17bkAbbnb1mYrTudy31rFY1DtyEkBAQEBAQEBAQMQMwEBAQEBAQO
        hq2s4mEnmZN9dS+rnPU/Adz8p1Ws26c2tFe0UxPErHzMyrCwMe3Ie1tja/5mpEHVnO4LbAb+ob9JbOCa
        xuyqM8WtqqdShegnGfiZi6ZccWupsm9NvMUP5aVk9QC2x3PuAl+PBNo2z5fURSdMcKeKGDnlq71+h2Kp
        ceZYGqYDvs+w6+4xfBavXkx+orbvw5Ne8UNKxUbybRk3D6tdYfkPXqDZtsP4yK4LT2m3qKR0rzifxWzs
        xWqx1GJUw2JVue5h+/sOX5D5zRT09Y78s2T1NreI8PngLw6v1NkyskmvEJ5t9wbb/aB13Ue1jGXNFfEd
        mLBN/M9L3xMauitKakVK61CIijYKo7ATFM78y3xERGoc0hJAQEBAQEBAQEBAxAzAxAzAQEDjuuStGsdl
        REBZnYhVUDuST2EEzpUvGfi0d3x9NA6bqcxxv861P95+ya8fp/mzHl9T8VVTnZt2RY119r22N1ayxizH
        5maoiI8QxzaZncrw8HuFvoeJ9NtXa/MUFQR1ro7qPcW7/ZMWfJynUN/p8fGNz8rEmdpebPEbRsjD1PLa
        1X5Mi576biDyOrktsG7bjfYj3T0cVotWNPLzUmt5263B3CuRq+QKawUrUFrcgoTXWB2G/YsfZJyZIpG0
        Y8c3nULIwvBfGBBuzLn9q1oifxO8zz6mfiGqPSR8yhXibwgmk5Nfkh/o2Qm9ZY8xV1ADqT9h+cuw5Oce
        e1GfFwnx00fD/Emdpr8+LeyAndqz6VT/ALynp8+87tStu1dMlqdLr4I8SMXUuWi/lx8o9Ahb83af2GPr
        /ZP8ZjyYZr5jpvxZ4v4ntOpQvICAgICAgICAgICAgICAgceRelSPbYwVK1Lu7HYKoG5JiI2iZ15efvET
        jy3VLGopLV4VZ2VNyGuI/Tf3exf5zfixRSNz287Nmm86jpCZeoSvw24a/wBKagiOB5GOBfkdvSUHonzP
        8N5VmvwquwY+dno9QAAANgOgA9QnnPTZgcWRj12ry2Ijr/VdQw+wyYnSJiJ7ZoorrXlrREUdlRQo+wSN
        7TEackCK+JmiDP0rIXYeZQpyaWO3Rk6kb+9dx85bhtxsqzU5Ul5unovLZUkEEEgg7gjoQYFz+F3iEcgp
        p2a+931cbIY/0vsRz/W9h9fx7482HX7VbsGff62WnMrWQEBAQEBAQEBAQEBAQECm/Gjiws/+iqW9BNnz
        CP0m7rX8B3Pymv0+P/tLF6nL/wBYVRNbGQOzpuoX4lyX49jVWod1de/wI7Ee4yJiJjUpraazuF58BeJF
        Go8mNk8tGX2HXaq4/sk9m/Z+yYcuGa+Y6ehizxfxPafyhoICB09V1PHwqXyMixa60HVmPc+oAesn2CTW
        s2nUObWisblQvHviDkaqzUVc1OGD0r/Tt9jWH/69vjN2LDFPM9vPzZ5v4jpCpeoIGUYqQwJBUgqR0II7
        EQPRfhnxT/pTBHmEfScbarIHrb+rZt7wPtBnnZsfC38PTwZOdf5S+VLiAgICAgICAgICAgIHR1zUkwsT
        Iyn+rRW1m3tIHQfM7D5zqteU6c2txiZeV8vJsvssusYtZaxssY+tidzPTiNRp5Np3O3FJQQEADt19Y6g
        wPQ/hLnZeTpSW5VptPmOlLt1fy12HpH9I779Z5+eIi3h6Xp5mablNJSvIHnjxZzsx9VvovtLV0sDj1jo
        i1sNweX+t12J79J6GCI47h5vqLW56lC5coICAgS3wu1s4Oq0bttVkn6NcPV6X1D8m2+0ynNXlVd6e/G7
        0dPPemQEBAQEBAQEBAQEBAgHjXmmrSPLB/2i+us/ujdz/hEv9PG7s/qZ1TSg5vecQEBAQJDwhxhmaRbz
        VNz0sfzuM59B/eP6re8fxleTHF+1mPLanS++GuK8TVKBbjvsy8vnUtsLKyT13Hs9/aYL45pOpejTJF43
        CGcfeKKUc+JpzK9vVbMro1dft5PUze/sPfLsWDfmyjL6iI8VU1kXva7WWOzu5LO7ElmY9yTNkRphmdzt
        xyQgICADFfSB2I6qR3BHYwR29ZaZlefj0Xf+NUln/UoP855UxqdPYidxt2ZCSAgICAgICAgICAgRjjvh
        IazTTSbzSKbDbuE5+b0Su3ce2WY8nCdqsuPnGkL/ACKJ+sG+4H4pd7qfpT7SPs/Ion6wb7gfij3U/SPa
        R9n5FE/WDfcD8Ue6n6PaR9n5FE/WDfcD8Ue6n6PaR9n5FE/WDfcD8Ue6n6PaR9n5FE/WDfcD8Ue6n6Pa
        R9uSnwbNZJTU7ULKVYrVykqe4OzdR7o9zv4THpdfLj/Ion6wb7gfij3U/R7SPs/Ion6wb7gfij3U/SPa
        R9n5FE/WDfcD8Ue6n6PaR9n5FE/WDfcD8Ue6n6PaR9n5FE/WDfcD8Ue6n6PaR9n5FE/WDfcD8Ue5n6Pa
        R9n5FE/WDfcD8Ue6n6PaR9rO0bB+i4uPjc/P9HqSnnI2Lcqgb7ertM1p3O2qscYiHdkOiAgICAgICAgI
        CAgICAgaDjrXhpmnZGSGAt5fLxwRvvc3Renr27/ATvHTlbSvJfjXaN+FnGOTqDZWLnODk18t1Q8tayaS
        ACNh7Dsf+eW5scV1NeleDLNtxbtzeLHEmbplWE2JYqNfa6PzIj7gAbfWHTqZGClbTO0572pEaaTK1ri/
        TkbLyqaLqK+tqAUnlXuW3rO46A9eoG/adxXFbxCubZq+ZSTUuMfP4fv1XCPJYiDo4VzVaHVWUg9D3+YI
        MrjHrJxlbbJvHyq6Xhfxy2pVX05bp9Jxwbef0UFlHrblAAHL0B+Ik5sXGdx05wZucee2l03xGy83X6ca
        l0XBsvalU5EZnRVb0+Yjcc2wO3qnc4Yrj3PbiuebZNR0kORxHmLxRTpgsX6K9BsavkTmLeVY31tt+6iV
        xSPxcvlbN5/Lx+Gj4h8Q8rTtesx7CHwazWr1BEDqrVqSwbbc7E77evtLK4Ytj3Haq+ea5NT033iZxPfh
        abj5eDcn565AtnKlitWyM3Tfp6hK8NItbVlmbJNaxNUywrC9NTt3atGY9upAJlU9ro6c0hJAQEBAQEBA
        QEBAQEBAQEBApjxd1k5OpY2BWll9WEVuyaagWLudiR0B7J0326c5mzBXVZt9see27RWPhqMril69bxtX
        GHfh1ny6clbA3K69VbbdR+gB0/YnUUiaTXe3E3mMkW1pKfHKxWo0p1IKtc7Kw7EFVIMq9N3K31PUJ1xH
        xFg4eJddddWV5GUVqyM1jFTsirv1J2MppSbTqF97xWNyq3QcS1OENWtYEJkW89Knf6oetSR7twfsmm0x
        +aGWsTGGXW/1LyMnSdKzsAML7UOJkqhYFke10Dnb9EA7N+z1PaT+SIvMWR+KZpE1d+3RKtN4l0DEr2/N
        4lXO4ABssLZPM595P8pzy5Y7T/74dzWK5Kw2+X//AG+N/wC2P/wWzmP+GXU/80Nfl6RTn8WajiXjdLcQ
        jcdCreVVsw94M6i01xRMOOMWyzEodxTZn4FD6HlbumPet+Lad+Xy+Vh6G46qebf3EES2nG084U5JtWOE
        vRGm/wCz0f8ApV/4RME9vRjp2ZCSAgICAgICAgICAgICAgICBHtC4QxsLMyc5XttyMrfzLLSp5d25iF2
        A2B6f9Illsk2iIV1xxWZt8u3xNw/j6pjHFyA3IWV1ZCA6MvYqSOnQkfAmc0vNZ3Cb0i8alqdX4DxM3Dw
        8O67IKYIK1OGQOV2CgMeXrsAB8p3XLNZmY+XNsUWiIn4azC8ItIqsDt59oH+7ssAQncHrygE/D3zqfUX
        lzHp6JZq+iUZeFZgMDXQ6LXtVspVVIIC9Nh9USqtpidrbUia8X3oOk14GLTiVFzXSCqFyCxBYt12Hvi1
        uU7krWKxqHQ1HhTGyNSxtUd7RfiotdaqyisgGw9Rtv8A7w+v2SYyTFeKJxxNoszZwrjNqqauWt8+tPLC
        br5W3Iydtt+zH1x+SePE/HHLkUcKYyapZqwe3z7U8tkJXy9uVV6Dbfso9cfknjxRGOItyfPFvCOHq6Vr
        kBw1RJrtrIV1B+sOoIIOw+yTTJNOi+Ot+28oqCIiDfZFCjfvsBtK1jkgICAgICAgICAgICAgICAgICAg
        ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
        ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB//9k=
</value>
  </data>
</root>